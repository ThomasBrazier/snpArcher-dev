import pandas as pd
import os
include: "common.smk"


samples = pd.read_table(config["samples"], sep=",", dtype=str).replace(' ', '_', regex=True)
REFGENOME = samples['refGenome'].unique().tolist()


wildcard_constraints:
    prefix=config["final_prefix"]

rule all:
    input:
        expand("results/{refGenome}/quantize/{prefix}_callable_mappable_all_samples.bed", refGenome=REFGENOME, prefix=config["final_prefix"])


rule mosdepth_summary:
    input:
        bam = "results/{refGenome}/bams/{sample}_final.bam",
        bai = "results/{refGenome}/bams/{sample}_final.bam.bai"
    output:
        dist = "results/{refGenome}/quantize/{sample}.mosdepth.global.dist.txt",
        summary = "results/{refGenome}/quantize/{sample}.mosdepth.summary.txt"
    conda:
        "envs/cov_quantize.yml"
    log:
        "logs/{refGenome}/mosdepth_summary/{sample}.txt"
    benchmark:
        "benchmarks/{refGenome}/mosdepth_summary/{sample}.txt"
    params:
        prefix = os.path.join(workflow.default_remote_prefix, "results/{refGenome}/quantize/{sample}")
    shell:
        "mosdepth --no-per-base -t {threads} {params.prefix} {input.bam}"


rule mosdepth_quantize:
    input:
        summary = "results/{refGenome}/quantize/{sample}.mosdepth.summary.txt",
        bam = "results/{refGenome}/bams/{sample}_final.bam",
        bai = "results/{refGenome}/bams/{sample}_final.bam.bai"
    output:
        quantised = "results/{refGenome}/quantize/{sample}.quantized.bed.gz"
    conda:
        "envs/cov_quantize.yml"
    log:
        "logs/{refGenome}/mosdepth_quantize/{sample}.txt"
    benchmark:
        "benchmarks/{refGenome}/mosdepth_quantize/{sample}.txt"
    params:
        prefix = os.path.join(workflow.default_remote_prefix, "results/{refGenome}/quantize/{sample}"),
        lower = round(config["quantize_cov_threshold_lower"]),
        upper = round(config["quantize_cov_threshold_upper"]),
        sample_mean = lambda wildcards, input: get_mean_cov(input.summary),
        upper_threshold = lambda wildcards, input: round(config["quantize_cov_threshold_upper"] * get_mean_cov(input.summary))
    shell:
        """
        export MOSDEPTH_Q0=NO_COVERAGE
        export MOSDEPTH_Q1=LOW_COVERAGE
        export MOSDEPTH_Q2=CALLABLE
        export MOSDEPTH_Q3=HIGH_COVERAGE
        mosdepth --no-per-base -t {threads} --quantize 0:1:{params.lower}:{params.upper_threshold}: {params.prefix} {input.bam}
        """


rule callable_bed_per_sample:
    input:
        quantized = "results/{refGenome}/quantize/{sample}.quantized.bed.gz"
    output:
        callable_bed = "results/{refGenome}/quantize/{sample}.callable.bed"
    conda:
        "envs/cov_quantize.yml"
    shell:
        "zcat {input.quantized} | grep CALLABLE | bedtools sort | bedtools merge > {output.callable_bed} || true"


rule callable_bed_all_samples:
    input:
        unpack(get_all_callable_beds)
    output:
        callable_bed_all = "results/{refGenome}/quantize/{prefix}_callable_all_samples.bed",
    conda:
        "envs/cov_quantize.yml"
    params:
        names = get_sample_names,
        n_samples = get_sample_size
    shell:
        """
        if [ {params.n_samples} -gt 1 ];
        then
        bedtools multiinter -names {params.names} {input.callable_beds} > {output.callable_bed_all}
        else
        cat {input.callable_beds} > {output.callable_bed_all}
        fi
        """


rule add_mappability:
    input:
        callable_bed_all = "results/{refGenome}/quantize/{prefix}_callable_all_samples.bed",
        map_all = "results/{refGenome}/callable_sites/{prefix}_callable_sites_map.bed" if config['cov_filter'] else "results/{refGenome}/{prefix}_callable_sites.bed"
    output:
        callable_mappable_all = "results/{refGenome}/quantize/{prefix}_callable_mappable_all_samples.bed"
    conda:
        "envs/cov_quantize.yml"
    shell:
        "bedtools intersect -a {input.callable_bed_all} -b {input.map_all} | bedtools sort | bedtools merge > {output.callable_mappable_all}"
