# import libraries
from pandas import read_csv
from scipy.stats import chi2
import matplotlib.pyplot as plt
from statsmodels.stats.multitest import multipletests
from argparse import ArgumentParser, RawDescriptionHelpFormatter


def chi2_test(infile:str, outfile:str):
    """Chi square test to check which site is reads covering a site derive form a single locus
    Prints out sites that as a corrected p-value below 0.05

    Args:
        infile (str): _description_
        outfile (str): csv file with p-value and sites labelled as paralogs
    """

    PVAL = 0.05

    df_ngs = read_csv(infile, index_col=None, header=None, names=["chr", "pos", "loglikelihood", "alt_loglikelihood", "LR_mismapped"], sep="\t")
    df_ngs["chr"] = df_ngs["chr"].apply(strip_str)

    df_ngs["pval"] = 0.5*chi2.sf(df_ngs["LR_mismapped"], df=1) # sf means survival function = 1 - Cumulative density function = P(X > x)
    df_ngs["pval_adj"] = multipletests(df_ngs["pval"], method="bonferroni")[1]
    
    df_ngs["paralog"] = df_ngs["pval_adj"] < PVAL # True if <, else False
    df_ngs.to_csv(outfile, index=None, sep="\t")


def manhattan_plot(infile:str, outfile:str):
    """Plot LRs from ngsParalog

    Args:
        infile (str): _description_
        outfile (str): _description_
    """
    df = read_csv(infile, index_col=None, sep="\t")


    df['ind'] = range(len(df))
    df_grouped = df.groupby(('chr'))

    # manhattan plot
    fig = plt.figure(figsize=(18, 8)) # Set the figure size
    ax = fig.add_subplot(111)
    x_labels = []
    x_labels_pos = []

    for num, (name, group) in enumerate(df_grouped):
        if num % 2 == 0: colors = group["paralog"].map({True: "#DE464F", False: "#7D7D7D"})
        else: colors = group["paralog"].map({True: "#AB252D", False: "#B7B7B7"})
        group.plot(
            kind='scatter', 
            x='ind', 
            y='LR_mismapped', 
            color=colors, 
            ax=ax, 
            s=10
        )
        x_labels.append(name) # or (num + 1)
        x_labels_pos.append((group['ind'].iloc[-1] - (group['ind'].iloc[-1] - group['ind'].iloc[0])/2))


    ax.set_xticks(x_labels_pos)
    ax.set_xticklabels(x_labels)
    ax.set_xlabel('Chromosomes')
    ax.set_ylabel('Likelihood Ratio of mispapped read')

    plt.tight_layout()
    # set axis limits
    #ax.set_xlim([0, len(df)])
    #ax.set_ylim([0, 3.5])


    # show the graph
    plt.savefig(outfile)

def save_paralogs(infile:str, outfile:str):
    """Save sites that have adjusted p-value below 0.05
    considered as paralogs

    Args:
        infile (str): full .tsv generated by chi2_test
        outfile (str): .bed 2 columns : chr   position
    """

    df_ngs = read_csv(infile, index_col=None, sep="\t")

    paralogs = df_ngs[df_ngs["paralog"] == True][["chr", "pos"]]
    paralogs["end"] = paralogs["pos"] + 1

    n_paralogs = len(df_ngs[df_ngs["paralog"] == True])
    total_SNPs = len(df_ngs)
        
    print(f"\n \tParalogs : {n_paralogs}\n\tTotal # SNPs : {total_SNPs}\n\tProportion of paralogs : {round(n_paralogs / total_SNPs, 5)}\n")
    
    paralogs.to_csv(outfile, index=None, sep="\t", header=False)

def strip_str(string):
    return string.strip()

def parse_command_line():
    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog="""\n
    """)
    parser.add_argument('-i', '--input',type=str,
        help="Input path"
    )
    parser.add_argument('-o', '--output',type=str,
        help="Output path"
    )
    parser.add_argument('--pval',action="store_true",
        help="Estimate probabilities that sites are paralogs"
    )
    parser.add_argument('--plot',action="store_true",
        help="Save Manhattan plot to <output>.png or .svg"
    )
    parser.add_argument('--save',action="store_true",
        help="Save paralogs sites as a bed file to <output>.bed"
    )

    args = parser.parse_args()

    return args


if __name__ == "__main__":
 
    args = parse_command_line()

    if args.pval:
        chi2_test(args.input, args.output)

    elif args.plot:
        manhattan_plot(args.input, args.output)

    elif args.save:
        save_paralogs(args.input, args.output)

    else:
        raise ValueError("Choose btw --plot, --save et --pval")