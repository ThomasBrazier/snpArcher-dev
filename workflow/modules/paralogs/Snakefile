import pandas as pd
import os
configfile: "config/config.yaml"
include: "rules/common.smk"
import snparcher_utils

samples = snparcher_utils.parse_sample_sheet(config)
BIOSAMPLE: list = samples["BioSample"].unique().tolist()
REFGENOME: list = samples['refGenome'].unique().tolist()
FINAL_PREFIX: str = config["final_prefix"]
CHROMOSOMES: list = get_chr_list(config["chrom_list"])

wildcard_constraints:
    prefix = config["final_prefix"],
    chrom = "|".join(get_chr_list(config["chrom_list"]))


rule all:
    input:
        expand("results/{refGenome}/paralogs/{prefix}.{chrom}.paralogs.bed", refGenome=REFGENOME, prefix=FINAL_PREFIX, chrom=CHROMOSOMES),

rule get_bam_list:
    """
    List of all bam files
    """
    input:
        bams = expand("results/{refGenome}/bams/{sample}_final.bam", refGenome=REFGENOME, sample=BIOSAMPLE)
    output:
        bam_list = temp("results/{refGenome}/paralogs/{prefix}.bam_list.txt")
    log:
        "logs/{refGenome}/paralogs/{prefix}.log"
    shell:
        """
        printf "%s\n" {input.bams} > {output.bam_list}
        """

rule get_snps_list:
    """
    List of all snp positions
    """
    input:
        vcf = "results/{refGenome}/{prefix}_raw.vcf.gz"
    output:
        snps_list = temp("results/{refGenome}/paralogs/{prefix}.{chrom}.snps_list.bed")
    conda:
        "envs/paralogs.yml"
    shell:
        """
        bcftools view --no-header -r {wildcards.chrom} {input.vcf} | \
            awk -F '\t' '{{print $1 "\t" $2}}' > {output.snps_list}
        """

rule ngs_paralog:
    """
    Main ngsparalog command
    """
    input:
        bam_list = "results/{refGenome}/paralogs/{prefix}.bam_list.txt",
        snps_list = "results/{refGenome}/paralogs/{prefix}.{chrom}.snps_list.bed",
        ngsparalogs_path = config["ngsparalog_path"]
    output:
        paralogs_lr = "results/{refGenome}/paralogs/{prefix}.{chrom}.lr"
    conda:
        "envs/paralogs.yml"
    log:
        "logs/{refGenome}/paralogs/{prefix}.{chrom}.log"
    params:
        minQ = config["minQ"],
        minind = config["minind"],
        mincov = config["mincov"]
    shell:
        """
        samtools mpileup -b {input.bam_list} -l {input.snps_list} -q 0 -Q 0--ff UNMAP,DUP -d 0 | \
	        {input.ngsparalogs_path}/ngsParalog calcLR -infile - \
                -outfile {output.paralogs_lr} \
                -minQ {params.minQ} \
                -minind {params.minind} \
                -mincov {params.mincov}
        """

rule chi2:
    """
    Chi2 test for each site
    """
    input:
        paralogs_lr = "results/{refGenome}/paralogs/{prefix}.{chrom}.lr",
        script = workflow.source_path("scripts/get_paralogs.py")
    output:
        paralogs_pval = "results/{refGenome}/paralogs/{prefix}.{chrom}.pval.tsv"
    conda:
        "envs/paralogs.yml"
    shell:
        """
        python3 {input.script} \
	        -i {input.paralogs_lr} \
	        -o {output.paralogs_pval} --pval
        """

rule get_paralogs:
    """
    Mark sites below 0.05 as sites belonging to a paralogous region
    """
    input:
        paralogs_pval = "results/{refGenome}/paralogs/{prefix}.{chrom}.pval.tsv",
        script = workflow.source_path("scripts/get_paralogs.py")
    output:
        paralogs = "results/{refGenome}/paralogs/{prefix}.{chrom}.paralogs.bed"
    conda:
        "envs/paralogs.yml"
    shell:
        """
        python3 {input.script} \
	        -i {input.paralogs_pval} \
	        -o {output.paralogs} --save
        """

# Maybe better to do it outside ?
rule plot_paralogs:
    """
    Draw Manhattan plot
    """
    input:
        paralogs_pval = "results/{refGenome}/paralogs/{prefix}.pval.tsv",
        script = workflow.source_path("scripts/get_paralogs.py")
    output:
        paralogs_plot = "results/{refGenome}/paralogs/{prefix}.paralogs.png"
    conda:
        "envs/paralogs.yml"
    shell:
        """
        python3 {input.script} \
	        -i {input.paralogs_pval} \
	        -o {output.paralogs_plot} --plot
        """